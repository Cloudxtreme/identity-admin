{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Identity Admin Tool",
  "Parameters": {
    "Name": {
      "Description": "The name given to the autoscaling group",
      "Type": "String"
    },
    "Stage": {
      "Description": "Environment name",
      "Type": "String",
      "AllowedValues": [
        "CODE",
        "PROD"
      ]
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "hs1.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "MaxInstances": {
      "Description": "Maximum number of instances. This should be (at least) double the desired capacity.",
      "Type": "Number"
    },
    "MinInstances": {
      "Description": "Minimum number of instances",
      "Type": "Number"
    },
    "VpcId": {
      "Description": "ID of the VPC onto which to launch the application",
      "Type": "AWS::EC2::VPC::Id"
    },
    "PrivateVpcSubnets": {
      "Description": "Private subnets to use for ec2 instances",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "PublicVpcSubnets": {
      "Description": "Public subnets to use for the ELB",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "AmiId": {
      "Description": "Custom AMI to use for instances, created using Packer",
      "Type": "String"
    }
  },
  "Mappings": {
    "StageVariables": {
      "PROD": {
        "InstanceName": "PROD:identity-admin"
      },
      "CODE": {
        "InstanceName": "CODE:identity-admin"
      }
    }
  },

  "Resources": {
    "IdentityRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:GetObject",
                  "Resource": "arn:aws:s3:::gu-identity-*/*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ec2:DescribeTags",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IdentityRole"
          }
        ]
      }
    },

    "AutoscalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": {
          "Ref": "MinInstances"
        },
        "MaxSize": {
          "Ref": "MaxInstances"
        },
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": 400,
        "Tags": [
          {
            "Key": "Stage",
            "Value": {
              "Ref": "Stage"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Stack",
            "Value": "identity-admin",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "App",
            "Value": "identity-admin",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Role",
            "Value": "identity-admin",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "AmiId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "AssociatePublicIpAddress": "False",
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ev\n",
                "export IDENTITY_stage='",
                {
                  "Ref": "Stage"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Scheme" : "internal",
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "9000",
            "Protocol": "HTTP"
          }],
        "CrossZone": "true",
        "HealthCheck": {
          "Target": "HTTP:9000/management/healthcheck",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "10",
          "Interval": "30",
          "Timeout": "10"
        },
        "Subnets": { "Ref": "PrivateVpcSubnets" },
        "SecurityGroups": [
          { "Ref": "LoadBalancerSecurityGroup" }
        ]
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "Open up HTTP access to load balancer",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "9000",
            "ToPort": "9000",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "Open up HTTP access to load balancer",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "9000",
            "ToPort": "9000",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            }
          }
        ]
      }
    }
  }
}
